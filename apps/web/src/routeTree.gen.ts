/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { Route as rootRouteImport } from './routes/__root'
import { Route as WorkspacesRouteImport } from './routes/workspaces'
import { Route as SettingsRouteImport } from './routes/settings'
import { Route as NotesRouteImport } from './routes/notes'
import { Route as HomeRouteImport } from './routes/home'
import { Route as FilesRouteImport } from './routes/files'
import { Route as ExercisesRouteImport } from './routes/exercises'
import { Route as DashboardRouteImport } from './routes/dashboard'
import { Route as IndexRouteImport } from './routes/index'
import { Route as WorkspacesIndexRouteImport } from './routes/workspaces.index'
import { Route as WorkspacesWorkspaceIdRouteImport } from './routes/workspaces.$workspaceId'

const WorkspacesRoute = WorkspacesRouteImport.update({
  id: '/workspaces',
  path: '/workspaces',
  getParentRoute: () => rootRouteImport,
} as any)
const SettingsRoute = SettingsRouteImport.update({
  id: '/settings',
  path: '/settings',
  getParentRoute: () => rootRouteImport,
} as any)
const NotesRoute = NotesRouteImport.update({
  id: '/notes',
  path: '/notes',
  getParentRoute: () => rootRouteImport,
} as any)
const HomeRoute = HomeRouteImport.update({
  id: '/home',
  path: '/home',
  getParentRoute: () => rootRouteImport,
} as any)
const FilesRoute = FilesRouteImport.update({
  id: '/files',
  path: '/files',
  getParentRoute: () => rootRouteImport,
} as any)
const ExercisesRoute = ExercisesRouteImport.update({
  id: '/exercises',
  path: '/exercises',
  getParentRoute: () => rootRouteImport,
} as any)
const DashboardRoute = DashboardRouteImport.update({
  id: '/dashboard',
  path: '/dashboard',
  getParentRoute: () => rootRouteImport,
} as any)
const IndexRoute = IndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRouteImport,
} as any)
const WorkspacesIndexRoute = WorkspacesIndexRouteImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => WorkspacesRoute,
} as any)
const WorkspacesWorkspaceIdRoute = WorkspacesWorkspaceIdRouteImport.update({
  id: '/$workspaceId',
  path: '/$workspaceId',
  getParentRoute: () => WorkspacesRoute,
} as any)

export interface FileRoutesByFullPath {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/exercises': typeof ExercisesRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/notes': typeof NotesRoute
  '/settings': typeof SettingsRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}
export interface FileRoutesByTo {
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/exercises': typeof ExercisesRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/notes': typeof NotesRoute
  '/settings': typeof SettingsRoute
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces': typeof WorkspacesIndexRoute
}
export interface FileRoutesById {
  __root__: typeof rootRouteImport
  '/': typeof IndexRoute
  '/dashboard': typeof DashboardRoute
  '/exercises': typeof ExercisesRoute
  '/files': typeof FilesRoute
  '/home': typeof HomeRoute
  '/notes': typeof NotesRoute
  '/settings': typeof SettingsRoute
  '/workspaces': typeof WorkspacesRouteWithChildren
  '/workspaces/$workspaceId': typeof WorkspacesWorkspaceIdRoute
  '/workspaces/': typeof WorkspacesIndexRoute
}
export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/dashboard'
    | '/exercises'
    | '/files'
    | '/home'
    | '/notes'
    | '/settings'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/workspaces/'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/dashboard'
    | '/exercises'
    | '/files'
    | '/home'
    | '/notes'
    | '/settings'
    | '/workspaces/$workspaceId'
    | '/workspaces'
  id:
    | '__root__'
    | '/'
    | '/dashboard'
    | '/exercises'
    | '/files'
    | '/home'
    | '/notes'
    | '/settings'
    | '/workspaces'
    | '/workspaces/$workspaceId'
    | '/workspaces/'
  fileRoutesById: FileRoutesById
}
export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  DashboardRoute: typeof DashboardRoute
  ExercisesRoute: typeof ExercisesRoute
  FilesRoute: typeof FilesRoute
  HomeRoute: typeof HomeRoute
  NotesRoute: typeof NotesRoute
  SettingsRoute: typeof SettingsRoute
  WorkspacesRoute: typeof WorkspacesRouteWithChildren
}

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/workspaces': {
      id: '/workspaces'
      path: '/workspaces'
      fullPath: '/workspaces'
      preLoaderRoute: typeof WorkspacesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/settings': {
      id: '/settings'
      path: '/settings'
      fullPath: '/settings'
      preLoaderRoute: typeof SettingsRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/notes': {
      id: '/notes'
      path: '/notes'
      fullPath: '/notes'
      preLoaderRoute: typeof NotesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/home': {
      id: '/home'
      path: '/home'
      fullPath: '/home'
      preLoaderRoute: typeof HomeRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/files': {
      id: '/files'
      path: '/files'
      fullPath: '/files'
      preLoaderRoute: typeof FilesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/exercises': {
      id: '/exercises'
      path: '/exercises'
      fullPath: '/exercises'
      preLoaderRoute: typeof ExercisesRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/dashboard': {
      id: '/dashboard'
      path: '/dashboard'
      fullPath: '/dashboard'
      preLoaderRoute: typeof DashboardRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexRouteImport
      parentRoute: typeof rootRouteImport
    }
    '/workspaces/': {
      id: '/workspaces/'
      path: '/'
      fullPath: '/workspaces/'
      preLoaderRoute: typeof WorkspacesIndexRouteImport
      parentRoute: typeof WorkspacesRoute
    }
    '/workspaces/$workspaceId': {
      id: '/workspaces/$workspaceId'
      path: '/$workspaceId'
      fullPath: '/workspaces/$workspaceId'
      preLoaderRoute: typeof WorkspacesWorkspaceIdRouteImport
      parentRoute: typeof WorkspacesRoute
    }
  }
}

interface WorkspacesRouteChildren {
  WorkspacesWorkspaceIdRoute: typeof WorkspacesWorkspaceIdRoute
  WorkspacesIndexRoute: typeof WorkspacesIndexRoute
}

const WorkspacesRouteChildren: WorkspacesRouteChildren = {
  WorkspacesWorkspaceIdRoute: WorkspacesWorkspaceIdRoute,
  WorkspacesIndexRoute: WorkspacesIndexRoute,
}

const WorkspacesRouteWithChildren = WorkspacesRoute._addFileChildren(
  WorkspacesRouteChildren,
)

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  DashboardRoute: DashboardRoute,
  ExercisesRoute: ExercisesRoute,
  FilesRoute: FilesRoute,
  HomeRoute: HomeRoute,
  NotesRoute: NotesRoute,
  SettingsRoute: SettingsRoute,
  WorkspacesRoute: WorkspacesRouteWithChildren,
}
export const routeTree = rootRouteImport
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()
